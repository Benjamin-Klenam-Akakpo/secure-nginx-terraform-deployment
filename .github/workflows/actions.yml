name: 'Terraform Infrastructure Pipeline'

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-west-2'

jobs:
  terraform-check:
    name: 'Terraform Check'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Validate
      run: terraform validate

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: ./terraform
        soft_fail: true

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-check
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/develop'
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var="key_pair_name=${{ secrets.AWS_KEY_PAIR_NAME }}" \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="environment=${{ github.ref_name }}" \
          -out=tfplan \
          -no-color
      continue-on-error: true

    - name: Comment Plan on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const output = `#### Terraform Format and Init ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${{ steps.plan.outputs.stdout }}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Upload Plan Artifact
      if: steps.plan.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: tfplan-${{ github.sha }}
        path: terraform/tfplan
        retention-days: 7

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform-check, terraform-plan]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: production
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Download Plan Artifact
      if: github.event_name == 'push'
      uses: actions/download-artifact@v4
      with:
        name: tfplan-${{ github.sha }}
        path: terraform/

    - name: Terraform Apply
      run: |
        if [ -f "tfplan" ]; then
          echo "Applying from plan file..."
          terraform apply -auto-approve tfplan
        else
          echo "No plan file found, creating new plan and applying..."
          terraform apply \
            -var="key_pair_name=${{ secrets.AWS_KEY_PAIR_NAME }}" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="environment=prod" \
            -auto-approve
        fi

    - name: Terraform Output
      id: output
      run: terraform output -json

    - name: Create Summary
      run: |
        echo "## üöÄ Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Outputs:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.output.outputs.stdout }}' >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Access your application:" >> $GITHUB_STEP_SUMMARY
        echo "Load Balancer URL: $(terraform output -raw load_balancer_url)" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: production
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Destroy
      run: |
        terraform destroy \
          -var="key_pair_name=${{ secrets.AWS_KEY_PAIR_NAME }}" \
          -var="aws_region=${{ env.AWS_REGION }}" \
          -var="environment=prod" \
          -auto-approve

    - name: Create Summary
      run: |
        echo "## üí• Infrastructure Destroyed!" >> $GITHUB_STEP_SUMMARY
        echo "All AWS resources have been successfully destroyed." >> $GITHUB_STEP_SUMMARY